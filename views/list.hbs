<div class="bg-white p-7 rounded-lg shadow-md text-center">
    <h1 class="text-3xl font-semibold text-[#A78BFA] mb-6">Danh sách sinh viên</h1>
    <div class="flex justify-between items-center mt-4 mb-2">
        <!-- Xuất dữ liệu (nằm bên trái, ngang hàng) -->
        <div class="flex gap-2">
            <a href="/api/export/json" class="bg-[#B5DDD1] text-black px-4 py-2 rounded">Xuất JSON</a>
            <a href="/api/export/excel" class="bg-[#B5DDD1] text-black px-4 py-2 rounded">Xuất Excel</a>
        </div>

        <!-- Nhập dữ liệu (nằm bên phải) -->
        <div>
            <form id="import-form" enctype="multipart/form-data" class="flex gap-2">
                <input type="file" id="import-file" name="file" accept=".csv, .xlsx" class="border rounded px-4 py-2">
                <button type="submit" class="bg-[#D7E7A9] text-black px-4 py-2 rounded">Nhập dữ liệu</button>
            </form>
        </div>
    </div>

    <div class="overflow-x-auto">
        <table class="table-auto w-full border-collapse bg-white rounded-lg shadow-lg overflow-hidden text-center">
            <thead class="bg-gray-200 text-black">
                <tr>
                    <th class="px-3 py-2 text-[15px] font-medium">MSSV</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Họ và tên</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Ngày sinh</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Giới tính</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Khoa</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Khóa</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Chương trình</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Địa chỉ</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Email</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Số điện thoại liên hệ</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Tình trạng sinh viên</th>
                    <th class="px-3 py-2 text-[15px] font-medium">Hành động</th>
                </tr>
            </thead>
            <tbody>
                {{#each students}}
                <tr>
                    <td>{{this.mssv}}</td>
                    <td>{{this.họVàTên}}</td>
                    <td>{{this.ngàySinh}}</td>
                    <td>{{this.giớiTính}}</td>
                    <td>{{this.khoa}}</td>
                    <td>{{this.khóa}}</td>
                    <td>{{this.chươngTrình}}</td>
                    <td>{{this.địaChỉ}}</td>
                    <td>{{this.email}}</td>
                    <td>{{this.sốĐiệnThoại}}</td>
                    <td>{{this.tìnhTrạng}}</td>
                    <td>
                        <button onclick="editStudent('{{this._id}}')"
                            class="edit-btn bg-[#04B2D9] text-white px-2 py-1 rounded mt-1">Sửa</button>
                        <button onclick="deleteStudent('{{this._id}}')"
                            class="delete-btn bg-[#FEA6B6] text-white px-2 py-1 rounded mt-1">Xóa</button>
                    </td>

                </tr>
                {{/each}}
            </tbody>

        </table>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>

<script>
    const khoaOptions = ["Khoa Luật", "Khoa Tiếng Anh thương mại", "Khoa Tiếng Nhật", "Khoa Tiếng Pháp"];
    const tinhTrangOptions = ["Đang học", "Đã tốt nghiệp", "Đã thôi học", "Tạm dừng học"];

    const labels = {
        họVàTên: "Họ và Tên",
        ngàySinh: "Ngày sinh",
        giớiTính: "Giới tính",
        khoa: "Khoa",
        khóa: "Khóa",
        chươngTrình: "Chương trình",
        địaChỉ: "Địa chỉ",
        email: "Email",
        sốĐiệnThoại: "Số điện thoại",
        tìnhTrạng: "Tình trạng sinh viên"
    };

    async function editStudent(studentId) {
        if (!studentId) {
            alert("Lỗi: ID sinh viên không hợp lệ!");
            return;
        }

        try {
            // Lấy thông tin sinh viên hiện tại
            let response = await fetch(`/students/${studentId}`);
            if (!response.ok) throw new Error(`Lỗi API: ${response.status}`);
            let student = await response.json();

            // Lấy danh sách khoa, chương trình, và tình trạng hợp lệ từ localStorage
            let departments = JSON.parse(localStorage.getItem("departments")) || [];
            let programs = JSON.parse(localStorage.getItem("programs")) || [];

            // Lấy quy tắc trạng thái từ API
            let configResponse = await fetch('/config');
            let config = await configResponse.json();
            let statusRules = config.statusRules || {};

            // Chỉ lấy danh sách trạng thái có thể chuyển đổi từ trạng thái hiện tại
            let allowedNextStatuses = statusRules[student.tìnhTrạng] || [];
            if (allowedNextStatuses.length === 0) {
                allowedNextStatuses = [student.tìnhTrạng];
            }

            // Tạo danh sách `<option>` cho các select box
            let khoaSelectOptions = departments.map(k =>
                `<option value="${k}" ${student.khoa === k ? "selected" : ""}>${k}</option>`
            ).join("");

            let programSelectOptions = programs.map(p =>
                `<option value="${p}" ${student.chươngTrình === p ? "selected" : ""}>${p}</option>`
            ).join("");

            let statusSelectOptions = allowedNextStatuses.map(s =>
                `<option value="${s}" ${student.tìnhTrạng === s ? "selected" : ""}>${s}</option>`
            ).join("");

            let formHtml = `
        <div id="edit-form" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
            <div class="bg-white p-6 rounded-lg shadow-lg w-[500px]">
                <h2 class="text-xl font-bold text-center mb-4">Chỉnh sửa thông tin sinh viên</h2>
                
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block font-semibold">Mã số sinh viên</label>
                        <input type="text" id="edit-mssv" value="${student.mssv}" class="w-full p-2 border rounded" readonly>
                    </div>

                    <div>
                        <label class="block font-semibold">Họ và Tên</label>
                        <input type="text" id="edit-name" value="${student.họVàTên}" class="w-full p-2 border rounded">
                    </div>

                    <div>
                        <label class="block font-semibold">Ngày sinh</label>
                        <input type="date" id="edit-birthday" value="${student.ngàySinh}" class="w-full p-2 border rounded">
                    </div>

                    <div>
                        <label class="block font-semibold">Giới tính</label>
                        <select id="edit-gender" class="w-full p-2 border rounded">
                            <option value="Nam" ${student.giớiTính === "Nam" ? "selected" : ""}>Nam</option>
                            <option value="Nữ" ${student.giớiTính === "Nữ" ? "selected" : ""}>Nữ</option>
                        </select>
                    </div>

                    <div>
                        <label class="block font-semibold">Khoa</label>
                        <select id="edit-faculty" class="w-full p-2 border rounded">
                            ${khoaSelectOptions}
                        </select>
                    </div>

                    <div>
                        <label class="block font-semibold">Khóa</label>
                        <input type="text" id="edit-course" value="${student.khóa}" class="w-full p-2 border rounded">
                    </div>

                    <div>
                        <label class="block font-semibold">Chương trình</label>
                        <select id="edit-program" class="w-full p-2 border rounded">
                            ${programSelectOptions}
                        </select>
                    </div>

                    <div>
                        <label class="block font-semibold">Địa chỉ</label>
                        <input type="text" id="edit-address" value="${student.địaChỉ}" class="w-full p-2 border rounded">
                    </div>

                    <div>
                        <label class="block font-semibold">Email</label>
                        <input type="email" id="edit-email" value="${student.email}" class="w-full p-2 border rounded">
                    </div>

                    <div>
                        <label class="block font-semibold">Số điện thoại</label>
                        <input type="text" id="edit-phone" value="${student.sốĐiệnThoại}" class="w-full p-2 border rounded">
                    </div>

                    <div class="col-span-2">
                        <label class="block font-semibold">Tình trạng sinh viên</label>
                        <select id="edit-status" class="w-full p-2 border rounded">
                            ${statusSelectOptions}
                        </select>
                    </div>
                </div>

                <div class="flex justify-end gap-2 mt-4">
                    <button onclick="saveEdit('${student._id}')" class="bg-[#04B2D9] text-white px-4 py-2 rounded">Lưu</button>
                    <button onclick="closeEditForm()" class="bg-gray-400 text-white px-4 py-2 rounded">Hủy</button>
                </div>
            </div>
        </div>
        `;

            document.body.insertAdjacentHTML("beforeend", formHtml);
        } catch (error) {
            console.error("Lỗi khi lấy dữ liệu sinh viên:", error);
            alert("Không thể lấy thông tin sinh viên.");
        }
    }

    function closeEditForm() {
        let form = document.getElementById("edit-form");
        if (form) form.remove();
    }

    async function saveEdit(studentId) {
        let statusElement = document.querySelector("#edit-status");
        let newStatus = statusElement ? statusElement.value : null;

        if (!newStatus || newStatus === "undefined") {
            alert("Vui lòng chọn trạng thái hợp lệ!");
            return;
        }

        let updatedStudent = {
            họVàTên: document.querySelector("#edit-name")?.value.trim() || "",
            email: document.querySelector("#edit-email")?.value.trim() || "",
            ngàySinh: document.querySelector("#edit-birthday")?.value || "",
            giớiTính: document.querySelector("#edit-gender")?.value || "",
            khoa: document.querySelector("#edit-faculty")?.value || "",
            khóa: document.querySelector("#edit-course")?.value || "",
            chươngTrình: document.querySelector("#edit-program")?.value || "",
            địaChỉ: document.querySelector("#edit-address")?.value || "",
            sốĐiệnThoại: document.querySelector("#edit-phone")?.value || "",
            tìnhTrạng: newStatus  // Chắc chắn tình trạng có giá trị hợp lệ
        };

        try {
            console.log("Dữ liệu gửi lên server:", updatedStudent); // Kiểm tra log trước khi gửi

            let response = await fetch(`/students/${studentId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedStudent)
            });

            let result = await response.json();
            console.log("Phản hồi từ server:", result); // Kiểm tra phản hồi từ server

            alert(result.message);

            if (response.ok) {
                location.reload();
            }
        } catch (error) {
            console.error("Lỗi khi cập nhật:", error);
            alert("Không thể cập nhật thông tin.");
        }
    }

    async function deleteStudent(studentId) {
        if (!studentId) {
            alert("Lỗi: ID sinh viên không hợp lệ!");
            return;
        }

        try {
            let response = await fetch(`/students/${studentId}`);
            if (!response.ok) {
                alert("Không tìm thấy sinh viên!");
                return;
            }

            let student = await response.json();
            let createdAt = new Date(student.createdAt);
            let now = new Date();

            const deletionTimeLimit = 30;

            let timeDiff = (now - createdAt) / (1000 * 60);

            if (timeDiff > deletionTimeLimit) {
                alert(`Sinh viên này đã tồn tại hơn ${deletionTimeLimit} phút, không thể xóa!`);
                return;
            }

            if (confirm("Bạn có chắc chắn muốn xóa sinh viên này?")) {
                let deleteResponse = await fetch(`/students/${studentId}`, { method: "DELETE" });
                let result = await deleteResponse.json();
                alert(result.message);
                location.reload();
            }
        } catch (error) {
            console.error("Lỗi khi xóa:", error);
            alert("Không thể xóa sinh viên.");
        }
    }

    function promptSelect(message, options, currentValue) {
        let optionString = options.map((opt, i) => `${i + 1}. ${opt}`).join("\n");
        let selectedIndex = prompt(`${message}\n${optionString}`, options.indexOf(currentValue) + 1);
        return options[selectedIndex - 1] || currentValue;
    }

    async function fetchConfig() {
        const response = await fetch('/config');
        const config = await response.json();

        localStorage.setItem("departments", JSON.stringify(config.departments));
        localStorage.setItem("statuses", JSON.stringify(config.statuses));
        localStorage.setItem("programs", JSON.stringify(config.programs));
    }

    document.addEventListener("DOMContentLoaded", fetchConfig);

    document.getElementById("import-form").addEventListener("submit", async function (e) {
        e.preventDefault();

        const formData = new FormData();
        formData.append("file", document.getElementById("import-file").files[0]);

        const response = await fetch("/api/import", {
            method: "POST",
            body: formData
        });

        const result = await response.json();
        alert(result.message);
        location.reload();
    });

</script>